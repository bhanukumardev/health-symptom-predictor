version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:14-alpine
    container_name: health_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-health_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-health_password}
      POSTGRES_DB: ${POSTGRES_DB:-health_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - health_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U health_user -d health_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: health_backend
    ports:
      - "8888:8888"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-health_user}:${POSTGRES_PASSWORD:-health_password}@db:5432/${POSTGRES_DB:-health_db}
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./ml-model/models:/app/models
    networks:
      - health_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8888 --reload

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: health_frontend
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: http://localhost:8888
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - health_network
    command: npm run dev -- --host

  # Redis (Optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: health_redis
    ports:
      - "6379:6379"
    networks:
      - health_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  postgres_data:

networks:
  health_network:
    driver: bridge
